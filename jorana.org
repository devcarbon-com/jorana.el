* jorana.el - Reverse Literate setup using org-transclude.

** Overview:
*** About the name:

| Jorana is an english approximation for the Hindi word meaning to connect, interweave, join, unite. And yes, this is the only Hindi word I know about. 

*** Rational:
There are downsides to the standard literate style config:
- colaboration.
- need to have all code in file to tangle.
- eventually with a big enough project, tangling gets a bit slow. 
- testing can be tricky.

jorana.el is my attempt to remedy that a bit, using the excellent org-transclusion package.

*** workflow:

**** Transient magic interface

#+transclude: [[file:jorana.el::<id:1678513393>][_transient_define_prefix_jorana_dashboard______id_1678513393_]]  :src elisp :thing-at-point sexp

**** writing new code from org narrative
One of the neat things of literate programming is that you can structure your code the same way as you think about it. Or really any way at all. 

And it makes it straight-forward to remember how to set up the project, and writing a blog post of your work happens "for free".

Something I want to be as quck and seamless as possible is adding new code and linking code from the narrative. 

**** Including already written code from org narrative

- for finding: =find-and-insert-transclusion=
 find-file -> consult-line -> include and activate transclusion 
This will tag the line with an id so that the link doesn't break on renames or refactorings.

#+transclude: [[file:jorana.el::<id:1678618587>][_defun_find_and_insert_transclusion_______id_1678618587_]]  :src elisp :thing-at-point sexp

the magic happens mostly here:

#+transclude: [[file:jorana.el::<id:1672243830>][_defun_find_file_line_link___]]  :src elisp :thing-at-point sexp


***** TODO modify name extraction to not include ID

***** TODO in org-transclude pull request, target navigation

say in your source you have this:

#+begin_src clojure
(ns (:require
   ,,,
;;matrix  ;<id:1673570549>
   [tiltontec.cell.core :refer [cF cF+ cF_ cI]]
   [tiltontec.cell.observer :refer [fn-obs]]
   [tiltontec.model.core :refer [mget mset! mswap! fm*] :as md]
   [tiltontec.flutter-mx.core :refer [as-dart-callback] :as fx]
   [tiltontec.util.base :refer [dprn dp dpx]]
   [tiltontec.cell.base :refer [cinfo minfo] :as cty]
   [tiltontec.cell.integrity :refer [with-integrity]]))
#+end_src

the ideal target is going to be the first sexp under the id, but this

#+begin_src clojure
(ns (:require
   ,,,
   [tiltontec.cell.core :refer [cF cF+ cF_ cI]]
   [tiltontec.cell.observer :refer [fn-obs]]
   [tiltontec.model.core :refer [mget mset! mswap! fm* #_(<id:1673571805>)] :as md]
   [tiltontec.flutter-mx.core :refer [as-dart-callback] :as fx]
   [tiltontec.util.base :refer [dprn dp dpx]]
   [tiltontec.cell.base :refer [cinfo minfo] :as cty]
   [tiltontec.cell.integrity :refer [with-integrity]]))
#+end_src

The ideal probably would be =[mget mset! mswap! fm* #_(<id:1673571805>)]=.

but why not allow a Navigator lambda? Then the world is your oyster as they say. 
TODO ^

**** At code, want to include into narrative
Say I'm already looking at code or writing code in some file. I want to be able to instantly transclude the thing at point into the narrative. 

Probably want it to default to last point in the narrative, and have org-refile style navigation ready to go.

Better yet, use =recursive-edit= so that the user can navigate however they like. 

#+transclude: [[file:jorana.el::<id:1678580234>][_defun_add_to_narrative______id_1678580234_]]  :src elisp :thing-at-point sexp

**** jumping hither and yon


say you have a src block like so with your cursor after the ='w'=:

#+begin_src emacs-lisp
(defn hello-world ()
      (message "Hellow| world!"))
#+end_src

I want to be able to instantly jump back and forth from the source. So:

#+transclude: [[file:jorana.el::<id:1672282092>][_defun_search_target_in_last_used_buffers___]]  :src elisp :thing-at-point sexp

This works by searching for the current line in recent buffers and 

could use beg end info from transclude. Or evan searching for 'list at point. then calculating offset.

this then could be renamed and used as jump to recent ref using jumplist.

#+transclude: [[file:jorana.el::<id:1672282124>][_defun_search_target_in_last_used_buffers___target_bullseye_buffers_]]  :src elisp :thing-at-point sexp

**** converting existing literates to jorana

** implimentation details:
*** writing an emacs package:

This is my very first emacs package. 

Very glad for the [[https://github.com/Malabarba/names/][names]] package, makes namespacing possible.



** test zone:

#+transclude: [[file:jorana.el::<id:1672227875>][_defun_insert_id_tag______id_1672227875_]]  :src elisp :end "1" :thing-at-point sexp

#+RESULTS:

